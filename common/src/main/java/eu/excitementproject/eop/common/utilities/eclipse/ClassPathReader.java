package eu.excitementproject.eop.common.utilities.eclipse;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


/**
 * Reads an XML file generated by Eclipse for a Java project, that represents the
 * class-path for that project.
 * This XML file is usually named ".classpath", and exists in the root of each project.
 * 
 * @author Asher Stern
 * 
 * @see WorkspaceClassPathBuilder
 *
 */
public class ClassPathReader
{
	public static final String CLASSPATH_ENTRY = "classpathentry";
	public static final String KIND_ATTRIBUTE = "kind";
	public static final String KIND_ATTRIBUTE_VARIABLE = "var";
	public static final String PATH_ATTRIBUTE = "path";
	
	public ClassPathReader(File classPathFile, String variableName,
			String replaceVariableName)
	{
		super();
		this.classPathFile = classPathFile;
		this.variableName = variableName;
		this.replaceVariableName = replaceVariableName;
	}

	public void read() throws ClassPathReaderException
	{
		classPathEntries = new LinkedList<String>();
		try
		{
			Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(classPathFile);
			Element rootElement = document.getDocumentElement();
			NodeList childNodes = rootElement.getChildNodes();
			for (int index=0;index<childNodes.getLength();index++)
			{
				if (childNodes.item(index).getNodeType()==Node.ELEMENT_NODE)
				{
					Element childElement = (Element) childNodes.item(index);
					if (childElement.getNodeName().equals(CLASSPATH_ENTRY))
					{
						String kind=childElement.getAttribute(KIND_ATTRIBUTE);
						String path = childElement.getAttribute(PATH_ATTRIBUTE);
						if ( (kind!=null) && (path!=null) )
						{
							if (kind.equals(KIND_ATTRIBUTE_VARIABLE))
							{
								path = path.replaceFirst(variableName, replaceVariableName);
								classPathEntries.add(path);
							}
						}
					}
				}
			}
			
		}
		catch (SAXException e)
		{
			throw new ClassPathReaderException("xml error",e);
		}
		catch (IOException e)
		{
			throw new ClassPathReaderException("xml error",e);
		}
		catch (ParserConfigurationException e)
		{
			throw new ClassPathReaderException("xml error",e);
		}
	}
	
	public List<String> getClassPathEntries() throws ClassPathReaderException
	{
		if (null==classPathEntries) throw new ClassPathReaderException("not read yet.");
		return classPathEntries;
	}







	private File classPathFile;
	private String variableName;
	private String replaceVariableName;
	
	private List<String> classPathEntries = null;
	

}
