package ac.biu.nlp.nlp.engineml.operations.rules.legacylexical;

import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

import org.BIU.NLP.LR.resources.wn.WordNetKB;
import org.BIU.NLP.LR.resources.wn.WordNetRule;
import org.BIU.NLP.LR.resources.wn.WordNetTerm;
import org.BURST.NLP.TE.rep.Term;
import org.BURST.v2bridge.TermUtils;
import org.BURST.v2bridge.UnspecifiedTermUtils;

import ac.biu.nlp.nlp.engineml.operations.rules.ByLemmaPosLexicalRuleBaseWithCache;
import ac.biu.nlp.nlp.engineml.operations.rules.LexicalRule;
import ac.biu.nlp.nlp.engineml.operations.rules.RuleBaseException;
import ac.biu.nlp.nlp.general.configuration.ConfigurationException;
import ac.biu.nlp.nlp.general.configuration.ConfigurationParams;
import ac.biu.nlp.nlp.general.configuration.InitException;
import ac.biu.nlp.nlp.general.immutable.ImmutableSet;
import ac.biu.nlp.nlp.general.immutable.ImmutableSetWrapper;
import ac.biu.nlp.nlp.representation.PartOfSpeech;
import ac.biu.nlp.nlp.representation.UnsupportedPosTagStringException;


/**
 * 
 * @author Asher Stern
 * @since Feb 15, 2011
 *
 */
public class WordNetLexicalRuleBase extends ByLemmaPosLexicalRuleBaseWithCache<LexicalRule>
{
	////////////////////// PUBLIC ////////////////////////////////

	public static final boolean DEFAULT_LHS_ONLY_FIRST_SENSE = true;
	
	public static final Set<String> REMOVE_RHS;
	public static final Set<String> PRONOUNS;
	static
	{
		PRONOUNS = new HashSet<String>();
		PRONOUNS.add("I");
		PRONOUNS.add("You");
		PRONOUNS.add("you");
		PRONOUNS.add("he");
		PRONOUNS.add("He");
		PRONOUNS.add("she");
		PRONOUNS.add("She");
		PRONOUNS.add("it");
		PRONOUNS.add("It");
		PRONOUNS.add("We");
		PRONOUNS.add("we");
		PRONOUNS.add("They");
		PRONOUNS.add("they");
		
		REMOVE_RHS = new HashSet<String>();
		REMOVE_RHS.add("be");
	}
	
	public WordNetLexicalRuleBase(ConfigurationParams configurationParams) throws RuleBaseException
	{
		try
		{
			WordNetKB wordNetKB = new WordNetKB();
			wordNetKB.init(configurationParams);
			this.wordNetKB = wordNetKB;
		}
		catch(RuntimeException e)
		{
			throw new RuleBaseException("Could not construct WordNetKB rule base.",e);
		}
		catch (InitException e)
		{
			throw new RuleBaseException("Could not construct WordNetKB rule base.",e);
		}
		catch (ConfigurationException e)
		{
			throw new RuleBaseException("Could not construct WordNetKB rule base.",e);
		}
	}
	
	
	
	@Override
	protected ImmutableSet<LexicalRule> getRulesNotInCache(String lhsLemma, PartOfSpeech lhsPos) throws RuleBaseException
	{
		ImmutableSet<LexicalRule> ret = null;
		if (lhsLemma.length()==0)
			ret = EMPTY_SET;
		else if (PRONOUNS.contains(lhsLemma))
			ret = EMPTY_SET;
		else
		{
			try
			{
				Collection<? extends WordNetRule> legacyRules = findLegacyRules(lhsLemma,lhsPos);
				ret = fromLegacyRules(legacyRules,lhsLemma,lhsPos);
			}
			catch (Exception e)
			{
				throw new RuleBaseException("Legacy rule base failed. See nested exception.",e);
			}
		}
		return ret;
	}
	
//	@Override
//	public ImmutableSet<LexicalRule> getRules(String lhsLemma, String lhsPos, ImmutableSet<LemmaAndPos> hypothesisLemmas) throws RuleBaseException
//	{
//		ImmutableSet<LexicalRule> ret = null;
//		Set<LexicalRule> setRules = new LinkedHashSet<LexicalRule>();
//		if (lhsLemma.length()==0)
//			ret = EMPTY_SET;
//		else if (PRONOUNS.contains(lhsLemma))
//			ret = EMPTY_SET;
//		else
//		{
//			try
//			{
//				for (LemmaAndPos lemmaAndPos : hypothesisLemmas)
//				{
//					WordNetRule legacyRule = findLegacyRule2D(lhsLemma,lhsPos,lemmaAndPos.getLemma(),lemmaAndPos.getPartOfSpeech());
//					if (legacyRule!=null)
//					{
//						LexicalRule lexicalRule = fromLegacyRule(legacyRule, lhsLemma, lhsPos);
//						if (lexicalRule!=null)
//							setRules.add(lexicalRule);
//					}
//				}
//				ret = new ImmutableSetWrapper<LexicalRule>(setRules);
//			}
//			catch(Exception e)
//			{
//				throw new RuleBaseException("Legacy rule base failed. See nested exception.",e);
//			}
//		}
//		
//		return ret;
//	}

	
	public void setLhsOnlyFirstSense(boolean lhsOnlyFirstSense)
	{
		this.lhsOnlyFirstSense = lhsOnlyFirstSense;
	}
	
	public boolean isLhsOnlyFirstSense()
	{
		return lhsOnlyFirstSense;
	}

	////////////////////////////// PROTECTED & PRIVATE ////////////////////////////////////
	
//	protected WordNetRule findLegacyRule2D(String lhsLemma, String lhsPos, String rhsLemma, String rhsPos) throws Exception
//	{
//		Term leftTerm = TermUtils.fromLemmaAndPos(lhsLemma, lhsPos);
//		if (lhsOnlyFirstSense)
//		{
//			WordNetTerm wnTerm = new WordNetTerm(leftTerm);
//			wnTerm.addSense(1);
//			leftTerm = wnTerm;
//		}
//		Term rightTerm = TermUtils.fromLemmaAndPos(rhsLemma, rhsPos);
//		WordNetRule ret = null;
//		synchronized(wordNetKB) // I don't know whether the lexicalResource is thread safe
//		{
//			ret = wordNetKB.getRule(org.BURST.NLP.rule_base.RuleType.ENTAILMENT, leftTerm, rightTerm);
//		}
//		return ret;
//	}

	protected Collection<? extends WordNetRule> findLegacyRules(String lhsLemma, PartOfSpeech lhsPos) throws Exception
	{
		Term term = TermUtils.createTermFromLemmaAndPos(lhsLemma, lhsPos);
		if (lhsOnlyFirstSense)
		{
			WordNetTerm wnTerm = new WordNetTerm(term);
			wnTerm.addSense(1);
			term = wnTerm;
		}
		Collection<? extends WordNetRule> ret = null;
		synchronized(wordNetKB) // I don't know whether the lexicalResource is thread safe
		{
			ret = wordNetKB.getRulesForLeft(org.BURST.NLP.rule_base.RuleType.ENTAILMENT, term);
		}
		return ret;
	}
	
	protected LexicalRule fromLegacyRule(WordNetRule rule, String lhsLemma, PartOfSpeech lhsPos) throws UnsupportedPosTagStringException
	{
		LexicalRule ret = null;
		
		Term rightTerm = rule.right();
		String rhsLemma = rightTerm.lemma();
		PartOfSpeech rhsPos = this.termUtils.convertBurstPosToPartOfSpeech(rightTerm.posTag());
//		String rhsPos = MiniparTermUtils.toMiniparPos(rightTerm.posTag());
		if (rhsLemma!=null){if (rhsLemma.length()>0)
		{
			if (!REMOVE_RHS.contains(rhsLemma))
			{
				ret = new LexicalRule(lhsLemma, lhsPos, rhsLemma, rhsPos, EMINUS1);
			}
		}}
		
		return ret;
	}
	
	protected ImmutableSet<LexicalRule> fromLegacyRules(Collection<? extends WordNetRule> legacyRules, String lhsLemma, PartOfSpeech lhsPos) throws UnsupportedPosTagStringException
	{
		Set<LexicalRule> ret = new LinkedHashSet<LexicalRule>();
		for (WordNetRule rule : legacyRules)
		{
			LexicalRule lexicalRule = fromLegacyRule(rule,lhsLemma,lhsPos);
			if (lexicalRule!=null)
				ret.add(lexicalRule);
		}
		return new ImmutableSetWrapper<LexicalRule>(ret);
	}
	
	
	
	protected WordNetKB wordNetKB;
	protected UnspecifiedTermUtils termUtils = new UnspecifiedTermUtils();
	protected boolean lhsOnlyFirstSense = DEFAULT_LHS_ONLY_FIRST_SENSE;
	protected final static double EMINUS1 = Math.exp(-1.0);
	protected final static ImmutableSet<LexicalRule> EMPTY_SET = new ImmutableSetWrapper<LexicalRule>(new HashSet<LexicalRule>());

}
